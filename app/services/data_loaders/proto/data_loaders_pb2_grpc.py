# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import app.services.data_loaders.proto.data_loaders_pb2 as data__loaders__pb2


class YouTubeProcessorStub(object):
    """The gRPC service definition for processing YouTube videos and playlists
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessVideo = channel.unary_unary(
                '/DataLoaders.YouTubeProcessor/ProcessVideo',
                request_serializer=data__loaders__pb2.ProcessVideoRequest.SerializeToString,
                response_deserializer=data__loaders__pb2.ProcessVideoResponse.FromString,
                )
        self.ProcessVideoPlaylist = channel.unary_stream(
                '/DataLoaders.YouTubeProcessor/ProcessVideoPlaylist',
                request_serializer=data__loaders__pb2.ProcessVideoPlaylistRequest.SerializeToString,
                response_deserializer=data__loaders__pb2.ProcessVideoPlaylistResponse.FromString,
                )


class YouTubeProcessorServicer(object):
    """The gRPC service definition for processing YouTube videos and playlists
    """

    def ProcessVideo(self, request, context):
        """Processes a single YouTube video
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessVideoPlaylist(self, request, context):
        """Processes a YouTube playlist with server streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_YouTubeProcessorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessVideo': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessVideo,
                    request_deserializer=data__loaders__pb2.ProcessVideoRequest.FromString,
                    response_serializer=data__loaders__pb2.ProcessVideoResponse.SerializeToString,
            ),
            'ProcessVideoPlaylist': grpc.unary_stream_rpc_method_handler(
                    servicer.ProcessVideoPlaylist,
                    request_deserializer=data__loaders__pb2.ProcessVideoPlaylistRequest.FromString,
                    response_serializer=data__loaders__pb2.ProcessVideoPlaylistResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DataLoaders.YouTubeProcessor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class YouTubeProcessor(object):
    """The gRPC service definition for processing YouTube videos and playlists
    """

    @staticmethod
    def ProcessVideo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataLoaders.YouTubeProcessor/ProcessVideo',
            data__loaders__pb2.ProcessVideoRequest.SerializeToString,
            data__loaders__pb2.ProcessVideoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessVideoPlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DataLoaders.YouTubeProcessor/ProcessVideoPlaylist',
            data__loaders__pb2.ProcessVideoPlaylistRequest.SerializeToString,
            data__loaders__pb2.ProcessVideoPlaylistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
