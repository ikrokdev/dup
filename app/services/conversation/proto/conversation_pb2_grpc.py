# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import app.services.conversation.proto.conversation_pb2 as conversation__pb2


class ConversationServiceStub(object):
    """The service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTurn = channel.unary_unary(
                '/conversation.ConversationService/GetTurn',
                request_serializer=conversation__pb2.GetTurnRequest.SerializeToString,
                response_deserializer=conversation__pb2.Turn.FromString,
                )
        self.GetConversation = channel.unary_unary(
                '/conversation.ConversationService/GetConversation',
                request_serializer=conversation__pb2.GetConversationRequest.SerializeToString,
                response_deserializer=conversation__pb2.Conversation.FromString,
                )
        self.StartConversation = channel.unary_stream(
                '/conversation.ConversationService/StartConversation',
                request_serializer=conversation__pb2.StartConversationRequest.SerializeToString,
                response_deserializer=conversation__pb2.StartConversationResponse.FromString,
                )


class ConversationServiceServicer(object):
    """The service definition.
    """

    def GetTurn(self, request, context):
        """Get Turn
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConversation(self, request, context):
        """Get conversation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartConversation(self, request, context):
        """StartConversation initiates a conversation and sends periodic updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConversationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTurn': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTurn,
                    request_deserializer=conversation__pb2.GetTurnRequest.FromString,
                    response_serializer=conversation__pb2.Turn.SerializeToString,
            ),
            'GetConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConversation,
                    request_deserializer=conversation__pb2.GetConversationRequest.FromString,
                    response_serializer=conversation__pb2.Conversation.SerializeToString,
            ),
            'StartConversation': grpc.unary_stream_rpc_method_handler(
                    servicer.StartConversation,
                    request_deserializer=conversation__pb2.StartConversationRequest.FromString,
                    response_serializer=conversation__pb2.StartConversationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'conversation.ConversationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConversationService(object):
    """The service definition.
    """

    @staticmethod
    def GetTurn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ConversationService/GetTurn',
            conversation__pb2.GetTurnRequest.SerializeToString,
            conversation__pb2.Turn.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ConversationService/GetConversation',
            conversation__pb2.GetConversationRequest.SerializeToString,
            conversation__pb2.Conversation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/conversation.ConversationService/StartConversation',
            conversation__pb2.StartConversationRequest.SerializeToString,
            conversation__pb2.StartConversationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
